/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package robogp.matchmanager;


import java.awt.*;
import java.awt.CardLayout;
import java.awt.event.*;
import java.io.File;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.border.*;

/**
 *
 * @author claudia
 */
public class MatchManagerApp extends javax.swing.JFrame {

    private static MatchManagerApp singleInstance;
    private RobotStatePanel[] robotPanel;
    private final IniziarePartitaController inizPartController;
    private final RobotChooser robotChooser;

    /**
     * Creates new form MatchManager
     */
    private MatchManagerApp() {
        initComponents();
        this.inizPartController = IniziarePartitaController.getInstance();
        this.robotChooser = new RobotChooser(this, true);
    }

    public static MatchManagerApp getAppInstance() {
        return MatchManagerApp.singleInstance;
    }



    public IniziarePartitaController getIniziarePartitaController() {
        return this.inizPartController;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - valka getz
    private void initComponents() {
        initPanel = new JPanel();
        JPanel jPanel4 = new JPanel();
        JPanel jPanel1 = new JPanel();
        JPanel jPanel2 = new JPanel();
        JLabel jLabel1 = new JLabel();
        portField = new JTextField();
        JPanel jPanel3 = new JPanel();
        JLabel jLabel2 = new JLabel();
        keyField = new JTextField();
        JPanel jPanel5 = new JPanel();
        initButton = new JButton();
        matchPanel = new JPanel();
        JPanel jPanel6 = new JPanel();
        createButton = new JButton();
        JPanel jPanel7 = new JPanel();
        JPanel jPanel10 = new JPanel();
        JPanel jPanel11 = new JPanel();
        JLabel jLabel3 = new JLabel();
        robodromeCombo = new JComboBox<>();
        JPanel jPanel12 = new JPanel();
        JLabel jLabel4 = new JLabel();
        endGameCombo = new JComboBox<>();
        JPanel jPanel13 = new JPanel();
        JLabel jLabel5 = new JLabel();
        maxPlayersCombo = new JComboBox<>();
        JPanel jPanel14 = new JPanel();
        JLabel jLabel6 = new JLabel();
        nRobotsCombo = new JComboBox<>();
        upgradeCheck = new JCheckBox();
        playersPanel = new JPanel();
        JPanel jPanel8 = new JPanel();
        JScrollPane jScrollPane1 = new JScrollPane();
        requestList = new JList<>();
        JPanel jPanel15 = new JPanel();
        acceptRequestButton = new JButton();
        rejectRequestButton = new JButton();
        robotRecapPanel = new JPanel();
        JPanel jPanel16 = new JPanel();
        startMatchButton = new JButton();
        cancelMatchButton = new JButton();
        ongoingMatchPanel = new JPanel();
        JLabel jLabel7 = new JLabel();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("RoboGP Match Manager");
        setName("main frame");
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                formWindowClosing(e);
            }
        });
        Container contentPane = getContentPane();
        contentPane.setLayout(new CardLayout());

        //======== initPanel ========
        {
            initPanel.setBorder(new EmptyBorder(20, 5, 5, 5));

            // JFormDesigner evaluation mark
            initPanel.setBorder(new javax.swing.border.CompoundBorder(
                new javax.swing.border.TitledBorder(new javax.swing.border.EmptyBorder(0, 0, 0, 0),
                    "JFormDesigner Evaluation", javax.swing.border.TitledBorder.CENTER,
                    javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Dialog", java.awt.Font.BOLD, 12),
                    java.awt.Color.red), initPanel.getBorder())); initPanel.addPropertyChangeListener(new java.beans.PropertyChangeListener(){public void propertyChange(java.beans.PropertyChangeEvent e){if("border".equals(e.getPropertyName()))throw new RuntimeException();}});

            initPanel.setLayout(new BorderLayout());

            //======== jPanel4 ========
            {
                jPanel4.setBorder(new EmptyBorder(5, 5, 5, 5));
                jPanel4.setLayout(new FlowLayout());

                //======== jPanel1 ========
                {
                    jPanel1.setLayout(new BoxLayout(jPanel1, BoxLayout.Y_AXIS));

                    //======== jPanel2 ========
                    {
                        jPanel2.setLayout(new BorderLayout());

                        //---- jLabel1 ----
                        jLabel1.setFont(new Font("Lucida Grande", Font.PLAIN, 14));
                        jLabel1.setText("Porta su cui girer\u00e0 il server di gioco:");
                        jPanel2.add(jLabel1, BorderLayout.WEST);

                        //---- portField ----
                        portField.setColumns(6);
                        portField.setText("2222");
                        jPanel2.add(portField, BorderLayout.CENTER);
                    }
                    jPanel1.add(jPanel2);

                    //======== jPanel3 ========
                    {
                        jPanel3.setBorder(new EmptyBorder(0, 0, 30, 0));
                        jPanel3.setLayout(new BorderLayout());

                        //---- jLabel2 ----
                        jLabel2.setFont(new Font("Lucida Grande", Font.PLAIN, 14));
                        jLabel2.setText("Parola chiave per l'accesso al server:");
                        jPanel3.add(jLabel2, BorderLayout.WEST);

                        //---- keyField ----
                        keyField.setColumns(10);
                        jPanel3.add(keyField, BorderLayout.CENTER);
                    }
                    jPanel1.add(jPanel3);
                }
                jPanel4.add(jPanel1);
            }
            initPanel.add(jPanel4, BorderLayout.NORTH);

            //======== jPanel5 ========
            {
                jPanel5.setBorder(new EmptyBorder(5, 5, 5, 5));
                jPanel5.setLayout(new FlowLayout());

                //---- initButton ----
                initButton.setFont(new Font("Lucida Grande", Font.PLAIN, 18));
                initButton.setText("Continua");
                initButton.setAlignmentX(0.5F);
                initButton.setMaximumSize(new Dimension(122, 40));
                initButton.setMinimumSize(new Dimension(122, 40));
                initButton.setPreferredSize(new Dimension(122, 40));
                initButton.addActionListener(e -> initButtonActionPerformed(e));
                jPanel5.add(initButton);
            }
            initPanel.add(jPanel5, BorderLayout.SOUTH);
        }
        contentPane.add(initPanel, "init");

        //======== matchPanel ========
        {
            matchPanel.setLayout(new BorderLayout());

            //======== jPanel6 ========
            {
                jPanel6.setLayout(new FlowLayout());

                //---- createButton ----
                createButton.setFont(new Font("Lucida Grande", Font.PLAIN, 18));
                createButton.setText("Crea Partita");
                createButton.setAlignmentX(0.5F);
                createButton.setMaximumSize(new Dimension(172, 40));
                createButton.setMinimumSize(new Dimension(122, 40));
                createButton.setPreferredSize(new Dimension(172, 40));
                createButton.addActionListener(e -> createButtonActionPerformed(e));
                jPanel6.add(createButton);
            }
            matchPanel.add(jPanel6, BorderLayout.SOUTH);

            //======== jPanel7 ========
            {
                jPanel7.setBorder(new EmptyBorder(20, 5, 5, 5));
                jPanel7.setLayout(new FlowLayout());

                //======== jPanel10 ========
                {
                    jPanel10.setLayout(new BoxLayout(jPanel10, BoxLayout.Y_AXIS));

                    //======== jPanel11 ========
                    {
                        jPanel11.setBorder(new EmptyBorder(5, 5, 5, 5));
                        jPanel11.setAlignmentX(0.0F);
                        jPanel11.setLayout(new BorderLayout());

                        //---- jLabel3 ----
                        jLabel3.setFont(new Font("Lucida Grande", Font.PLAIN, 14));
                        jLabel3.setText("Robodromo:");
                        jPanel11.add(jLabel3, BorderLayout.WEST);

                        //---- robodromeCombo ----
                        robodromeCombo.setFont(new Font("Lucida Grande", Font.PLAIN, 14));
                        robodromeCombo.setModel(new DefaultComboBoxModel<>(new String[] {

                        }));
                        robodromeCombo.setPreferredSize(new Dimension(200, 33));
                        jPanel11.add(robodromeCombo, BorderLayout.CENTER);
                    }
                    jPanel10.add(jPanel11);

                    //======== jPanel12 ========
                    {
                        jPanel12.setBorder(new EmptyBorder(5, 5, 10, 5));
                        jPanel12.setAlignmentX(0.0F);
                        jPanel12.setLayout(new BorderLayout());

                        //---- jLabel4 ----
                        jLabel4.setFont(new Font("Lucida Grande", Font.PLAIN, 14));
                        jLabel4.setText("Fine partita:");
                        jPanel12.add(jLabel4, BorderLayout.WEST);

                        //---- endGameCombo ----
                        endGameCombo.setFont(new Font("Lucida Grande", Font.PLAIN, 14));
                        endGameCombo.setModel(new DefaultComboBoxModel<>(new String[] {
                            "primo arrivato",
                            "primi 3 arrivati",
                            "tutti tranne l'ultimo"
                        }));
                        endGameCombo.setMinimumSize(new Dimension(152, 27));
                        endGameCombo.setPreferredSize(new Dimension(152, 33));
                        jPanel12.add(endGameCombo, BorderLayout.CENTER);
                    }
                    jPanel10.add(jPanel12);

                    //======== jPanel13 ========
                    {
                        jPanel13.setBorder(new EmptyBorder(10, 5, 5, 5));
                        jPanel13.setAlignmentX(0.0F);
                        jPanel13.setLayout(new BorderLayout());

                        //---- jLabel5 ----
                        jLabel5.setFont(new Font("Lucida Grande", Font.PLAIN, 14));
                        jLabel5.setText("Numero massimo giocatori:");
                        jPanel13.add(jLabel5, BorderLayout.WEST);

                        //---- maxPlayersCombo ----
                        maxPlayersCombo.setFont(new Font("Lucida Grande", Font.PLAIN, 14));
                        maxPlayersCombo.setModel(new DefaultComboBoxModel<>(new String[] {
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8"
                        }));
                        maxPlayersCombo.setPreferredSize(new Dimension(100, 33));
                        jPanel13.add(maxPlayersCombo, BorderLayout.CENTER);
                    }
                    jPanel10.add(jPanel13);

                    //======== jPanel14 ========
                    {
                        jPanel14.setBorder(new EmptyBorder(5, 5, 20, 5));
                        jPanel14.setAlignmentX(0.0F);
                        jPanel14.setLayout(new BorderLayout());

                        //---- jLabel6 ----
                        jLabel6.setFont(new Font("Lucida Grande", Font.PLAIN, 14));
                        jLabel6.setText("Numero robot per giocatore:");
                        jPanel14.add(jLabel6, BorderLayout.WEST);

                        //---- nRobotsCombo ----
                        nRobotsCombo.setFont(new Font("Lucida Grande", Font.PLAIN, 14));
                        nRobotsCombo.setModel(new DefaultComboBoxModel<>(new String[] {
                            "1",
                            "2",
                            "3",
                            "4"
                        }));
                        nRobotsCombo.setPreferredSize(new Dimension(100, 33));
                        jPanel14.add(nRobotsCombo, BorderLayout.CENTER);
                    }
                    jPanel10.add(jPanel14);

                    //---- upgradeCheck ----
                    upgradeCheck.setFont(new Font("Lucida Grande", Font.PLAIN, 14));
                    upgradeCheck.setText("Dotazione iniziale upgrade");
                    jPanel10.add(upgradeCheck);
                }
                jPanel7.add(jPanel10);
            }
            matchPanel.add(jPanel7, BorderLayout.CENTER);
        }
        contentPane.add(matchPanel, "match");

        //======== playersPanel ========
        {
            playersPanel.setLayout(new BorderLayout());

            //======== jPanel8 ========
            {
                jPanel8.setBorder(new CompoundBorder(
                    new EmptyBorder(2, 2, 2, 2),
                    new CompoundBorder(
                        new EtchedBorder(),
                        new EmptyBorder(5, 5, 5, 5))));
                jPanel8.setLayout(new BorderLayout());

                //======== jScrollPane1 ========
                {

                    //---- requestList ----
                    requestList.setModel(new AbstractListModel<String>() {
                        String[] values = {

                        };
                        @Override
                        public int getSize() { return values.length; }
                        @Override
                        public String getElementAt(int i) { return values[i]; }
                    });
                    requestList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    requestList.addListSelectionListener(e -> requestListValueChanged(e));
                    jScrollPane1.setViewportView(requestList);
                }
                jPanel8.add(jScrollPane1, BorderLayout.CENTER);

                //======== jPanel15 ========
                {
                    jPanel15.setLayout(new FlowLayout());

                    //---- acceptRequestButton ----
                    acceptRequestButton.setText("Accetta...");
                    acceptRequestButton.setEnabled(false);
                    acceptRequestButton.addActionListener(e -> acceptRequestButtonActionPerformed(e));
                    jPanel15.add(acceptRequestButton);

                    //---- rejectRequestButton ----
                    rejectRequestButton.setText("Rifiuta");
                    rejectRequestButton.setEnabled(false);
                    rejectRequestButton.addActionListener(e -> rejectRequestButtonActionPerformed(e));
                    jPanel15.add(rejectRequestButton);
                }
                jPanel8.add(jPanel15, BorderLayout.SOUTH);
            }
            playersPanel.add(jPanel8, BorderLayout.WEST);

            //======== robotRecapPanel ========
            {
                robotRecapPanel.setLayout(new GridLayout(2, 4));
            }
            playersPanel.add(robotRecapPanel, BorderLayout.CENTER);

            //======== jPanel16 ========
            {
                jPanel16.setLayout(new FlowLayout());

                //---- startMatchButton ----
                startMatchButton.setFont(new Font("Lucida Grande", Font.PLAIN, 18));
                startMatchButton.setText("Avvia");
                startMatchButton.setAlignmentX(0.5F);
                startMatchButton.setEnabled(false);
                startMatchButton.setMaximumSize(new Dimension(122, 40));
                startMatchButton.setMinimumSize(new Dimension(122, 40));
                startMatchButton.setPreferredSize(new Dimension(122, 40));
                startMatchButton.addActionListener(e -> startMatchButtonActionPerformed(e));
                jPanel16.add(startMatchButton);

                //---- cancelMatchButton ----
                cancelMatchButton.setFont(new Font("Lucida Grande", Font.PLAIN, 18));
                cancelMatchButton.setText("Annulla");
                cancelMatchButton.setAlignmentX(0.5F);
                cancelMatchButton.setMaximumSize(new Dimension(122, 40));
                cancelMatchButton.setMinimumSize(new Dimension(122, 40));
                cancelMatchButton.setPreferredSize(new Dimension(122, 40));
                cancelMatchButton.addActionListener(e -> cancelMatchButtonActionPerformed(e));
                jPanel16.add(cancelMatchButton);
            }
            playersPanel.add(jPanel16, BorderLayout.SOUTH);
        }
        contentPane.add(playersPanel, "players");

        //======== ongoingMatchPanel ========
        {
            ongoingMatchPanel.setLayout(new FlowLayout());

            //---- jLabel7 ----
            jLabel7.setText("Qui dovrebbe comparire la GUI di gestione della partita in corso");
            ongoingMatchPanel.add(jLabel7);
        }
        contentPane.add(ongoingMatchPanel, "ongoing");
        setSize(737, 373);
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void initButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initButtonActionPerformed
        int num = 0;
        boolean ok = true;
        try {
            num = Integer.parseInt(this.portField.getText().trim());
        } catch (NumberFormatException ex) {
            ok = false;
            JOptionPane.showMessageDialog(this, "La porta deve essere un numero\ncompreso fra 1024 e 65535");
        }
        if (ok && (num < 1024 || num > 65535)) {
            ok = false;
            JOptionPane.showMessageDialog(this, "La porta deve essere un numero\ncompreso fra 1024 e 65535");
        }
        if (ok) {
            this.inizPartController.iniziaCreazionePartita(num, this.keyField.getText().trim());
            this.setupMatchPanel();
            ((CardLayout) this.getContentPane().getLayout()).show(this.getContentPane(), "match");
        }
    }//GEN-LAST:event_initButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        String rbdName = this.robodromeCombo.getSelectedItem().toString();
        int endGameOpt = this.endGameCombo.getSelectedIndex();
        boolean upgradeOpt = this.upgradeCheck.isSelected();
        int nPl = this.maxPlayersCombo.getSelectedIndex() + 2;
        int nRob = this.nRobotsCombo.getSelectedIndex() + 1;
        boolean ok = true;
        if (nPl * nRob > Match.ROBOTSINGAME) {
            ok = false;
            JOptionPane.showMessageDialog(this, "Con " + nRob + " per giocatore, non si possono avere " + nPl + " giocatori.\n"
                    + "Il massimo numero di robot nel gioco è " + Match.ROBOTSINGAME);
        }
        if (ok) {
            this.inizPartController.creaPartita(rbdName, nPl, nRob, Match.EndGame.values()[endGameOpt], upgradeOpt);
            this.requestList.setModel(this.inizPartController.getRequestList());
            ArrayList<MatchRobot> allRobots = Match.getInstance().getAllRobots();
            this.robotPanel = new RobotStatePanel[allRobots.size()];
            this.robotRecapPanel.removeAll();
            for (int i=0; i < robotPanel.length; i++) {
                this.robotPanel[i] = new RobotStatePanel(allRobots.get(i));
                this.robotRecapPanel.add(this.robotPanel[i]);
            }
            ((CardLayout) this.getContentPane().getLayout()).show(this.getContentPane(), "players");
        }
    }//GEN-LAST:event_createButtonActionPerformed

    private void requestListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_requestListValueChanged
        boolean enabled = (this.requestList.getSelectedIndex() >= 0);
        this.acceptRequestButton.setEnabled(enabled && this.inizPartController.canAcceptMoreRequests());
        this.rejectRequestButton.setEnabled(enabled);
    }//GEN-LAST:event_requestListValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.inizPartController.chiudi();
    }//GEN-LAST:event_formWindowClosing

    private void acceptRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptRequestButtonActionPerformed
        int pos = this.requestList.getSelectedIndex();
        String nickname = this.requestList.getSelectedValue();
        ArrayList<MatchRobot> robots = Match.getInstance().getAvailableRobots();
        this.robotChooser.setup(robots, Match.getInstance().getRobotsPerPlayer());
        this.robotChooser.setVisible(true);
        if (this.robotChooser.getCloseStatus() == JOptionPane.OK_OPTION) {
            ((DefaultListModel<String>) this.requestList.getModel()).remove(pos);
            this.inizPartController.accettaRichiesta(nickname, this.robotChooser.getSelection());
            this.acceptRequestButton.setEnabled(this.requestList.getSelectedIndex() >= 0 && this.inizPartController.canAcceptMoreRequests());
            this.startMatchButton.setEnabled(this.inizPartController.canStartMatch());
            for (RobotStatePanel rsp: robotPanel) {
                rsp.update();
            }
            this.robotRecapPanel.updateUI();
        }
    }//GEN-LAST:event_acceptRequestButtonActionPerformed

    private void rejectRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectRequestButtonActionPerformed
        int pos = this.requestList.getSelectedIndex();
        String nickname = this.requestList.getSelectedValue();
        this.inizPartController.rifiutaRichiesta(nickname);
        ((DefaultListModel<String>) this.requestList.getModel()).remove(pos);

    }//GEN-LAST:event_rejectRequestButtonActionPerformed

    private void cancelMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelMatchButtonActionPerformed
        this.inizPartController.annullaPartita();
        ((CardLayout) this.getContentPane().getLayout()).show(this.getContentPane(), "match");
    }//GEN-LAST:event_cancelMatchButtonActionPerformed

    private void startMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMatchButtonActionPerformed
        this.inizPartController.avviaPartita();
        ((CardLayout) this.getContentPane().getLayout()).show(this.getContentPane(), "ongoing");
    }//GEN-LAST:event_startMatchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchManagerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchManagerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchManagerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchManagerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            MatchManagerApp.singleInstance = new MatchManagerApp();
            MatchManagerApp.singleInstance.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - valka getz
    private JPanel initPanel;
    private JTextField portField;
    private JTextField keyField;
    private JButton initButton;
    private JPanel matchPanel;
    private JButton createButton;
    private JComboBox<String> robodromeCombo;
    private JComboBox<String> endGameCombo;
    private JComboBox<String> maxPlayersCombo;
    private JComboBox<String> nRobotsCombo;
    private JCheckBox upgradeCheck;
    private JPanel playersPanel;
    private JList<String> requestList;
    private JButton acceptRequestButton;
    private JButton rejectRequestButton;
    private JPanel robotRecapPanel;
    private JButton startMatchButton;
    private JButton cancelMatchButton;
    private JPanel ongoingMatchPanel;
    // End of variables declaration//GEN-END:variables

    private void setupMatchPanel() {
        File robodromeDir = new File("robodromes");
        File[] robodromeFiles = robodromeDir.listFiles();
        String[] opts = new String[robodromeFiles.length];
        for (int i = 0; i < opts.length; i++) {
            opts[i] = robodromeFiles[i].getName().split("\\.")[0];
        }
        this.robodromeCombo.setModel(new DefaultComboBoxModel<>(opts));
    }
}
